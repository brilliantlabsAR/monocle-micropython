MICROPY_ROM_TEXT_COMPRESSION ?= 1
MICROPY_VFS_LFS2 = 1
MICROPY_VFS_FAT = 0
FROZEN_MANIFEST = manifest.py
CROSS_COMPILE = arm-none-eabi-

include ../micropython/py/mkenv.mk
include ../micropython/extmod/extmod.mk
include ../micropython/py/py.mk

NRF = 52832
SD = s132
SOFTDEVICE_VERSION = 7.3.0
HEXMERGE = hexmerge.py --overlap=ignore
OPENOCD = openocd -c 'gdb_port 2331'
OPENOCD_FLASH = -c 'init; nrf52_recover; program build/firmware.hex verify; reset run; exit'
OPENOCD_RTT = -c 'init; rtt setup 0x20000000 0x8000 "SEGGER RTT"; rtt start; rtt server start 9090 0'
OPENOCD_STLINK = -f interface/stlink-dap.cfg -f target/nrf52.cfg
OPENOCD_JLINK = -f interface/jlink.cfg -c 'transport select swd' -f target/nrf52.cfg
NRFJPROG = nrfjprog
NRFUTIL = nrfutil
JLINKGDBSERVERCL = JLinkGDBServerCLExe
GDB = gdb-multiarch
PYTHON = python3
GIT_COMMIT = $(shell git rev-parse HEAD | cut -c 1-6)
BUILD_VERSION = monocle-firmware-$(shell git tag -l 'v[0-9]*' | tail -n 1)
RELEASE = $(shell TZ= date +v%y.%j.%H%M)

# Softdevice binary placed to the flash, imported from the nRF5-SDK
SOFTDEVICE_HEX = ../$(SD)/$(SD)_nrf52_$(SOFTDEVICE_VERSION)_softdevice.hex

# Application built by this Makefile
APPLICATION_HEX := build/application.hex
APPLICATION_ELF := build/application.elf

# Bluetooth settings generated by nrfutil below
BLSETTINGS_HEX := build/blsettings.hex

# Bootloader from Nordic
BOOTLOADER_HEX := ../bootloader/build/nrf52832_xxaa_s132.hex

# Key used by the Nordic bootloader
BOOTLOADER_KEY := ../bootloader/published_privkey.pem

# Complete firmware containing everything.
FIRMWARE_HEX = build/firmware.hex

# Signed Zip archive of the merged dfu package hex file.
FIRMWARE_ZIP = build/firmware.zip

CFLAGS += $(DEF) $(INC) $(CFLAGS_EXTRA) $(CFLAGS_MOD) $(CFLAGS_MCU_m4)
CFLAGS += -mthumb
CFLAGS += -mabi=aapcs
CFLAGS += -fsingle-precision-constant
CFLAGS += -Wdouble-promotion
CFLAGS += -Wall
CFLAGS += -mtune=cortex-m4
CFLAGS += -mcpu=cortex-m4
CFLAGS += -mfpu=fpv4-sp-d16
CFLAGS += -mfloat-abi=hard
CFLAGS += -ffunction-sections -fdata-sections
CFLAGS += -ansi
CFLAGS += -std=c11
CFLAGS += -nostdlib
CFLAGS += -fno-strict-aliasing
CFLAGS += -fno-tree-loop-distribute-patterns
CFLAGS += -g -Os

LDFLAGS = $(CFLAGS)
LDFLAGS += -Wl,--gc-sections
LDFLAGS += -Xlinker -Map=$(@:.elf=.map)
LDFLAGS += -mthumb -mabi=aapcs -Tnrf$(NRF).ld

LIBS += -lgcc -lm

INC += -I.
INC += -Ibuild
INC += -Imodules
INC += -I../segger_rtt
INC += -I../micropython
INC += -I../micropython/lib/cmsis/inc
INC += -I../micropython/shared/readline
INC += -I../nrfx
INC += -I../nrfx/drivers
INC += -I../nrfx/drivers/include
INC += -I../nrfx/drivers/src
INC += -I../nrfx/hal
INC += -I../nrfx/helpers
INC += -I../nrfx/mdk
INC += -I../nrfx/soc
INC += -I../$(SD)/include
INC += -I../$(SD)/include/nrf52

DEF += -DNRF$(NRF)_XXAA
DEF += -DNRF$(NRF)
DEF += -DCONFIG_GPIO_AS_PINRESET
DEF += -DNRF5_HAL_H='<nrf$(NRF)_hal.h>'
DEF += -DSOFTDEVICE_PRESENT
DEF += -DBLUETOOTH_SD=132
DEF += -DBLUETOOTH_SD_DEBUG=1
DEF += -DMICROPY_QSTR_EXTRA_POOL=mp_qstr_frozen_const_pool
DEF += -DMICROPY_MODULE_FROZEN_MPY
DEF += -DMICROPY_MODULE_FROZEN_STR
DEF += -DGIT_COMMIT='"$(GIT_COMMIT)"'
DEF += -DBUILD_VERSION='"$(BUILD_VERSION)"'

# https://github.com/sandeepmistry/arduino-nRF5/issues/206
DEF += -DCONFIG_NFCT_PINS_AS_GPIOS

SRC += main.c
SRC += nrfx_log.c
SRC += mphalport.c
SRC += nrf$(NRF).c

SRC += driver/battery.c
SRC += driver/bluetooth_data_protocol.c
SRC += driver/bluetooth_low_energy.c
SRC += driver/ecx336cn.c
SRC += driver/flash.c
SRC += driver/fpga.c
SRC += driver/i2c.c
SRC += driver/iqs620.c
SRC += driver/max77654.c
SRC += driver/ov5640.c
SRC += driver/spi.c
SRC += driver/timer.c
SRC += font.c
SRC += libjojpeg.c

SRC += modules/camera.c
SRC += modules/display.c
SRC += modules/fpga.c
SRC += modules/led.c
SRC += modules/device.c
SRC += modules/time.c
SRC += modules/touch.c

SRC += ../segger_rtt/SEGGER_RTT.c
SRC += ../segger_rtt/SEGGER_RTT_Syscalls_GCC.c
SRC += ../segger_rtt/SEGGER_RTT_printf.c

SRC += ../micropython/lib/libm/acoshf.c
SRC += ../micropython/lib/libm/asinfacosf.c
SRC += ../micropython/lib/libm/asinhf.c
SRC += ../micropython/lib/libm/atan2f.c
SRC += ../micropython/lib/libm/atanf.c
SRC += ../micropython/lib/libm/atanhf.c
SRC += ../micropython/lib/libm/ef_rem_pio2.c
SRC += ../micropython/lib/libm/ef_sqrt.c
SRC += ../micropython/lib/libm/erf_lgamma.c
SRC += ../micropython/lib/libm/fmodf.c
SRC += ../micropython/lib/libm/kf_cos.c
SRC += ../micropython/lib/libm/kf_rem_pio2.c
SRC += ../micropython/lib/libm/kf_sin.c
SRC += ../micropython/lib/libm/kf_tan.c
SRC += ../micropython/lib/libm/log1pf.c
SRC += ../micropython/lib/libm/math.c
SRC += ../micropython/lib/libm/nearbyintf.c
SRC += ../micropython/lib/libm/roundf.c
SRC += ../micropython/lib/libm/sf_cos.c
SRC += ../micropython/lib/libm/sf_erf.c
SRC += ../micropython/lib/libm/sf_frexp.c
SRC += ../micropython/lib/libm/sf_ldexp.c
SRC += ../micropython/lib/libm/sf_modf.c
SRC += ../micropython/lib/libm/sf_sin.c
SRC += ../micropython/lib/libm/sf_tan.c
SRC += ../micropython/lib/libm/wf_lgamma.c
SRC += ../micropython/lib/libm/wf_tgamma.c
SRC += ../micropython/shared/libc/string0.c
SRC += ../micropython/shared/readline/readline.c
SRC += ../micropython/shared/runtime/interrupt_char.c
SRC += ../micropython/shared/runtime/pyexec.c
SRC += ../micropython/shared/runtime/sys_stdio_mphal.c
SRC += ../micropython/shared/timeutils/timeutils.c

SRC += ../nrfx/drivers/src/nrfx_clock.c
SRC += ../nrfx/drivers/src/nrfx_gpiote.c
SRC += ../nrfx/drivers/src/nrfx_nvmc.c
SRC += ../nrfx/drivers/src/nrfx_rtc.c
SRC += ../nrfx/drivers/src/nrfx_saadc.c
SRC += ../nrfx/drivers/src/nrfx_spi.c
SRC += ../nrfx/drivers/src/nrfx_spim.c
SRC += ../nrfx/drivers/src/nrfx_systick.c
SRC += ../nrfx/drivers/src/nrfx_timer.c
SRC += ../nrfx/drivers/src/nrfx_twi.c
SRC += ../nrfx/drivers/src/prs/nrfx_prs.c
SRC += ../nrfx/helpers/nrfx_flag32_allocator.c
SRC += ../nrfx/mdk/system_nrf52.c

SRC_QSTR += $(SRC) $(SRC_MOD)

OBJ += $(PY_O)
OBJ += $(addprefix build/, $(SRC:.c=.o))

all: ${FIRMWARE_HEX} ${FIRMWARE_ZIP}

clean: clean_extra

clean_extra:
	rm -rf micropython segger_rtt nrfx

release:
	sed -i 's/NEXT_RELEASE/$(RELEASE)/' ../CHANGELOG.md
	git commit -am "Release $(RELEASE)"
	git tag $(RELEASE)

flash_openocd_stlink:
	$(OPENOCD) $(OPENOCD_STLINK) $(OPENOCD_FLASH)

flash_openocd_jlink:
	$(OPENOCD) $(OPENOCD_JLINK) $(OPENOCD_FLASH)

rtt_openocd_stlink:
	$(OPENOCD) $(OPENOCD_STLINK) $(OPENOCD_RTT)

rtt_openocd_jlink:
	$(OPENOCD) $(OPENOCD_JLINK) $(OPENOCD_RTT)

flash_nrfjprog_jlink:
	$(NRFJPROG) --family nrf52 --recover
	$(NRFJPROG) --family nrf52 --verify --program ${FIRMWARE_HEX} --debugreset

gdb_openocd_stlink:
	$(OPENOCD) $(OPENOCD_STLINK)

gdb_openocd_jlink:
	$(OPENOCD) $(OPENOCD_JLINK)

gdb_segger_jlink:
	$(JLINKGDBSERVERCL) -device nrf$(NRF)_XXAA -if SWD

gdb:
	$(GDB) -ex 'target extended-remote :2331' -ex 'monitor reset' -ex 'continue' $(APPLICATION_ELF)

$(APPLICATION_ELF): $(OBJ)
	$(ECHO) 'LINK $@'
	$(Q)$(CC) $(LDFLAGS) -o $@ $(OBJ) $(LDFLAGS_MOD) $(LIBS)
	$(Q)$(SIZE) $@

${FIRMWARE_HEX}: $(SOFTDEVICE_HEX) $(BOOTLOADER_HEX) ${APPLICATION_HEX} $(BLSETTINGS_HEX)
	$(HEXMERGE) $(APPLICATION_HEX) $(BOOTLOADER_HEX) $(SOFTDEVICE_HEX) $(BLSETTINGS_HEX) -o $@

$(BLSETTINGS_HEX): $(APPLICATION_HEX)
	$(NRFUTIL) settings generate --family NRF52 --application ${APPLICATION_HEX} --application-version 0 --bootloader-version 0 --bl-settings-version 2 $@

$(FIRMWARE_ZIP): $(BOOTLOADER_KEY) $(APPLICATION_HEX)
	$(NRFUTIL) pkg generate --hw-version 52 --application-version 1 --application $(APPLICATION_HEX) --sd-req 0x0124 --key-file $(BOOTLOADER_KEY) $@

.SUFFIXES: .elf .hex

.elf.hex:
	$(OBJCOPY) -O ihex $< $@

include ../micropython/py/mkrules.mk
